{"ast":null,"code":"var _jsxFileName = \"/home/user/agrivision/frontend/src/components/WeatherChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register necessary components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function WeatherChart() {\n  _s();\n  const [weatherData, setWeatherData] = useState([]);\n  useEffect(() => {\n    fetch('/data/rdu-weather-history.json').then(response => response.json()).then(data => {\n      // Convertir les dates en objets Date et trier\n      const sortedData = data.map(entry => ({\n        ...entry,\n        date: new Date(entry.date) // Convertir en objet Date\n      })).sort((a, b) => a.date - b.date); // Trier par date\n\n      setWeatherData(sortedData);\n    }).catch(error => console.error('Error loading data:', error));\n  }, []);\n  const chartData = {\n    labels: weatherData.map(entry => entry.date.toISOString().split('T')[0] // Formater en YYYY-MM-DD\n    ),\n    datasets: [{\n      label: 'Minimum Temperature (°F)',\n      data: weatherData.map(entry => entry.tmin),\n      borderColor: 'rgba(54, 162, 235, 0.8)',\n      // Blue with transparency\n      backgroundColor: 'rgba(54, 162, 235, 0.2)',\n      // Light blue for point fill\n      pointBorderColor: 'rgba(54, 162, 235, 1)',\n      pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n      borderWidth: 2,\n      // Line thickness\n      pointRadius: 4 // Point size\n    }, {\n      label: 'Maximum Temperature (°F)',\n      data: weatherData.map(entry => entry.tmax),\n      borderColor: 'rgba(255, 99, 132, 0.8)',\n      // Red with transparency\n      backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      // Light red for point fill\n      pointBorderColor: 'rgba(255, 99, 132, 1)',\n      pointBackgroundColor: 'rgba(255, 99, 132, 1)',\n      borderWidth: 2,\n      // Line thickness\n      pointRadius: 4 // Point size\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n        // Position of the legend\n        labels: {\n          font: {\n            size: 14 // Font size for legend labels\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date',\n          font: {\n            size: 16 // Font size for x-axis title\n          }\n        },\n        ticks: {\n          autoSkip: true,\n          // Évite le chevauchement des dates\n          maxTicksLimit: 10,\n          // Affiche un nombre raisonnable de labels\n          maxRotation: 45,\n          // Incline les dates pour meilleure lisibilité\n          minRotation: 45\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Temperature (°F)',\n          font: {\n            size: 16 // Font size for y-axis title\n          }\n        },\n        ticks: {\n          beginAtZero: true // Start the y-axis at 0\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold text-center mb-4\",\n      children: \"Temperature Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherChart, \"/WBsAESNl5X9UOGQ8x5/AmmeTCo=\");\n_c = WeatherChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","WeatherChart","_s","weatherData","setWeatherData","fetch","then","response","json","data","sortedData","map","entry","date","Date","sort","a","b","catch","error","console","chartData","labels","toISOString","split","datasets","label","tmin","borderColor","backgroundColor","pointBorderColor","pointBackgroundColor","borderWidth","pointRadius","tmax","options","responsive","plugins","legend","position","font","size","scales","x","title","display","text","ticks","autoSkip","maxTicksLimit","maxRotation","minRotation","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user/agrivision/frontend/src/components/WeatherChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register necessary components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nexport default function WeatherChart() {\r\n  const [weatherData, setWeatherData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('/data/rdu-weather-history.json')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Convertir les dates en objets Date et trier\r\n        const sortedData = data\r\n          .map((entry) => ({\r\n            ...entry,\r\n            date: new Date(entry.date), // Convertir en objet Date\r\n          }))\r\n          .sort((a, b) => a.date - b.date); // Trier par date\r\n\r\n        setWeatherData(sortedData);\r\n      })\r\n      .catch((error) => console.error('Error loading data:', error));\r\n  }, []);\r\n\r\n  const chartData = {\r\n    labels: weatherData.map((entry) =>\r\n      entry.date.toISOString().split('T')[0] // Formater en YYYY-MM-DD\r\n    ),\r\n    datasets: [\r\n      {\r\n        label: 'Minimum Temperature (°F)',\r\n        data: weatherData.map((entry) => entry.tmin),\r\n        borderColor: 'rgba(54, 162, 235, 0.8)', // Blue with transparency\r\n        backgroundColor: 'rgba(54, 162, 235, 0.2)', // Light blue for point fill\r\n        pointBorderColor: 'rgba(54, 162, 235, 1)',\r\n        pointBackgroundColor: 'rgba(54, 162, 235, 1)',\r\n        borderWidth: 2, // Line thickness\r\n        pointRadius: 4, // Point size\r\n      },\r\n      {\r\n        label: 'Maximum Temperature (°F)',\r\n        data: weatherData.map((entry) => entry.tmax),\r\n        borderColor: 'rgba(255, 99, 132, 0.8)', // Red with transparency\r\n        backgroundColor: 'rgba(255, 99, 132, 0.2)', // Light red for point fill\r\n        pointBorderColor: 'rgba(255, 99, 132, 1)',\r\n        pointBackgroundColor: 'rgba(255, 99, 132, 1)',\r\n        borderWidth: 2, // Line thickness\r\n        pointRadius: 4, // Point size\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top', // Position of the legend\r\n        labels: {\r\n          font: {\r\n            size: 14, // Font size for legend labels\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Date',\r\n          font: {\r\n            size: 16, // Font size for x-axis title\r\n          },\r\n        },\r\n        ticks: {\r\n          autoSkip: true, // Évite le chevauchement des dates\r\n          maxTicksLimit: 10, // Affiche un nombre raisonnable de labels\r\n          maxRotation: 45, // Incline les dates pour meilleure lisibilité\r\n          minRotation: 45,\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Temperature (°F)',\r\n          font: {\r\n            size: 16, // Font size for y-axis title\r\n          },\r\n        },\r\n        ticks: {\r\n          beginAtZero: true, // Start the y-axis at 0\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white p-4 rounded-lg shadow-lg\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">Temperature Overview</h2>\r\n      <Line data={chartData} options={options} />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}